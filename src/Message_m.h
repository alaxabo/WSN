//
// Generated file, do not edit! Created by nedtool 4.6 from Message.msg.
//

#ifndef _MESSAGE_M_H_
#define _MESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Message.msg:15</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message Message
 * {
 *     int destination;
 *     int source;
 *     int currentRound;
 * }
 * </pre>
 */
class Message : public ::cMessage
{
  protected:
    int destination_var;
    int source_var;
    int currentRound_var;

  private:
    void copy(const Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Message&);

  public:
    Message(const char *name=NULL, int kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const {return new Message(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getCurrentRound() const;
    virtual void setCurrentRound(int currentRound);
};

inline void doPacking(cCommBuffer *b, Message& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:23</tt> by nedtool.
 * <pre>
 * message TDMASchedule extends Message
 * {
 *     int frame;
 * }
 * </pre>
 */
class TDMASchedule : public ::Message
{
  protected:
    int frame_var;

  private:
    void copy(const TDMASchedule& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TDMASchedule&);

  public:
    TDMASchedule(const char *name=NULL, int kind=0);
    TDMASchedule(const TDMASchedule& other);
    virtual ~TDMASchedule();
    TDMASchedule& operator=(const TDMASchedule& other);
    virtual TDMASchedule *dup() const {return new TDMASchedule(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFrame() const;
    virtual void setFrame(int frame);
};

inline void doPacking(cCommBuffer *b, TDMASchedule& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TDMASchedule& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:28</tt> by nedtool.
 * <pre>
 * message DataMessage extends Message
 * {
 *     double data;
 * }
 * </pre>
 */
class DataMessage : public ::Message
{
  protected:
    double data_var;

  private:
    void copy(const DataMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMessage&);

  public:
    DataMessage(const char *name=NULL, int kind=0);
    DataMessage(const DataMessage& other);
    virtual ~DataMessage();
    DataMessage& operator=(const DataMessage& other);
    virtual DataMessage *dup() const {return new DataMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getData() const;
    virtual void setData(double data);
};

inline void doPacking(cCommBuffer *b, DataMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:33</tt> by nedtool.
 * <pre>
 * message DataToBSEncodeMsg extends Message
 * {
 *     int source[];
 *     string code;
 * }
 * </pre>
 */
class DataToBSEncodeMsg : public ::Message
{
  protected:
    int *source_var; // array ptr
    unsigned int source_arraysize;
    opp_string code_var;

  private:
    void copy(const DataToBSEncodeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataToBSEncodeMsg&);

  public:
    DataToBSEncodeMsg(const char *name=NULL, int kind=0);
    DataToBSEncodeMsg(const DataToBSEncodeMsg& other);
    virtual ~DataToBSEncodeMsg();
    DataToBSEncodeMsg& operator=(const DataToBSEncodeMsg& other);
    virtual DataToBSEncodeMsg *dup() const {return new DataToBSEncodeMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setSourceArraySize(unsigned int size);
    virtual unsigned int getSourceArraySize() const;
    virtual int getSource(unsigned int k) const;
    virtual void setSource(unsigned int k, int source);
    virtual const char * getCode() const;
    virtual void setCode(const char * code);
};

inline void doPacking(cCommBuffer *b, DataToBSEncodeMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataToBSEncodeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:39</tt> by nedtool.
 * <pre>
 * message StatusInfo extends Message
 * {
 *     double energy;
 * }
 * </pre>
 */
class StatusInfo : public ::Message
{
  protected:
    double energy_var;

  private:
    void copy(const StatusInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StatusInfo&);

  public:
    StatusInfo(const char *name=NULL, int kind=0);
    StatusInfo(const StatusInfo& other);
    virtual ~StatusInfo();
    StatusInfo& operator=(const StatusInfo& other);
    virtual StatusInfo *dup() const {return new StatusInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getEnergy() const;
    virtual void setEnergy(double energy);
};

inline void doPacking(cCommBuffer *b, StatusInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, StatusInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Message.msg:44</tt> by nedtool.
 * <pre>
 * message DataToBSMsg extends Message
 * {
 *     DataMessage dataToBS[];
 *     int size;
 * }
 * </pre>
 */
class DataToBSMsg : public ::Message
{
  protected:
    DataMessage *dataToBS_var; // array ptr
    unsigned int dataToBS_arraysize;
    int size_var;

  private:
    void copy(const DataToBSMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataToBSMsg&);

  public:
    DataToBSMsg(const char *name=NULL, int kind=0);
    DataToBSMsg(const DataToBSMsg& other);
    virtual ~DataToBSMsg();
    DataToBSMsg& operator=(const DataToBSMsg& other);
    virtual DataToBSMsg *dup() const {return new DataToBSMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setDataToBSArraySize(unsigned int size);
    virtual unsigned int getDataToBSArraySize() const;
    virtual DataMessage& getDataToBS(unsigned int k);
    virtual const DataMessage& getDataToBS(unsigned int k) const {return const_cast<DataToBSMsg*>(this)->getDataToBS(k);}
    virtual void setDataToBS(unsigned int k, const DataMessage& dataToBS);
    virtual int getSize() const;
    virtual void setSize(int size);
};

inline void doPacking(cCommBuffer *b, DataToBSMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataToBSMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _MESSAGE_M_H_

